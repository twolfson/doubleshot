#!/usr/bin/env node

// Invoke via `doubleshot`
// Invoke via `doubleshot test`
// Invoke via `doubleshot --outline test/outline --content test/content`

// Load in commander for parsing
var program = require('commander'),
    pkg = require('../package');

// Silence errors
program.unknownOption = function () {};

// Parse parameters
program
  .version(pkg.version)
  .option('--outline [path]', 'Path (minimatch compatible) to outline files')
  .option('--content [path]', 'Path (minimatch compatible) to content files')
  .parse(process.argv);

console.log(program);

// Localize and fallback info from dir
var glob = require('glob'),
    testDir = parsed.argv.remain[0] || 'test',
    outlinePaths = parsed.outline,
    contentPaths = parsed.content;

// TODO: Support multiple extensions (and be extensible about it) -- look at mocha
  var path = require('path'),
      cwd = process.cwd();
function resolveFiles(params) {
  // Localize params
  var paths = params.paths,
      dir = params.dir,
      namespace = params.namespace;

  // Begin searching for files
  var files = [];

  // If there are no outline paths, attempt to locate them in dir
  if (!paths) {
    // Look for {{dir}}/*_outline* (e.g. test/doubleshot_outline.json)
    files = glob.sync(dir + '/*_' + namespace + '.{js,json,node}');

    // If none is found, look for {{dir}}/outline/**/* (e.g. test/outline/doubleshot.json)
    if (files.length === 0) {
      files = glob.sync(dir + '/' + namespace + '/**/*.{js,json,node}');
    }
  } else {
  // Otherwise, resolve paths via glob
    files = glob.sync(paths);
  }

  // If there are files, expand their paths
  if (files.length) {
    files = files.map(function getProperPath (filepath) {
      return path.join(cwd, filepath);
    });
  }

  // Return files
  return files;
}

// Resolve outlineFiles and contentFiles
var outlineFiles = resolveFiles({
      paths: outlinePaths,
      dir: testDir,
      namespace: 'outline'
    }),
    contentFiles = resolveFiles({
      paths: contentPaths,
      dir: testDir,
      namespace: 'content'
    });

// If there are no outline files, notify the user and quit
if (outlineFiles.length === 0) {
  console.error('No doubleshot outline files could be found.');
  console.error('Please place them as `test/{{name}}_outline.json`, `test/outline/{{name}}.json` or specify them via `--outline`.');
  process.exit(1);
}

// Similarly notify for contentFiles
if (contentFiles.length === 0) {
  console.error('No doubleshot content files could be found.');
  console.error('Please place them as `test/{{name}}_content.js`, `test/content/{{name}}.js` or specify them via `--content`.');
  process.exit(1);
}

// Grab the first two args and append the remaining ones
// DEV: First two args are always `node [...]/doubleshot`
var argv = process.argv.slice(0, 2);
argv.push.apply(argv, parsed.argv.remain);

console.log(argv);

// Override process.argv and process.argc so mocha behaves
process.argv = argv;
process.argc = argv.length;

// Load in files
var outlineArr = outlineFiles.map(require),
    contentArr = contentFiles.map(require);

// Call doubleshot
var doubleshot = require('../lib/doubleshot');
doubleshot({
  outlines: outlineArr,
  content: contentArr
});