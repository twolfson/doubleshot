#!/usr/bin/env node

// Invoke via `doubleshot`
// Invoke via `doubleshot test`
// Invoke via `doubleshot --outline test/outline --content test/content`

// Load in modules
var fs = require('fs');

// Parse parameters
var program = require('commander');

// Doubleshot params
program
  .usage('[debug] [test dir] [--options]')
  .option('-O, --outline <pattern>', 'Path to outline files (minimatch accepted)')
  .option('-N, --content <pattern>', 'Path to content files (minimatch accepted)');

// Construct a doubleshot with mocha params
var Doubleshot = require('../lib/doubleshot'),
    doubleshot = require('./_doubleshot');

// Localize and fallback info from dir
// DEV: Always looks like node doubleshot arg1 arg2
var glob = require('glob'),
    testDir = process.argv[2],
    outlinePaths = program.outline,
    contentPaths = program.content;

// If there is no testDir or it is an option, fallback to `test`
if (!testDir || testDir.match(/^\-/)) {
  testDir = 'test';
}

// Load in js-yaml for automatic .yml/.yaml path resolution via `require`
require('js-yaml');

// Add JSON, YAML, and node to our list of extensions
// TODO: Contemplate reading in directly from `require.extensions`
var extensions = program.extensions.concat(['json', 'yaml', 'yml', 'node']),
    extensionStr = extensions.join(',');

// Helper function to filter for existing file paths
var path = require('path'),
    cwd = process.cwd();
function resolveFiles(params) {
  // Localize params
  var paths = params.paths,
      dir = params.dir,
      namespace = params.namespace;

  // Begin searching for files
  var files = [];

  // If there are no outline paths, attempt to locate them in dir
  if (!paths) {
    // Look for {{dir}}/*outline* (e.g. test/doubleshot_outline.json)
    files = glob.sync(dir + '/*' + namespace + '.{' + extensionStr + '}');

    // If none is found, look for {{dir}}/outline/**/* (e.g. test/outline/doubleshot.json)
    if (files.length === 0) {
      files = glob.sync(dir + '/' + namespace + '/**/*.{' + extensionStr + '}');
    }
  } else {
  // Otherwise, resolve paths via glob
    files = glob.sync(paths);
  }

  // If there are files, expand their paths
  if (files.length) {
    files = files.map(function getProperPath (filepath) {
      return path.join(cwd, filepath);
    });
  }

  // Return files
  return files;
}

// Resolve outlineFiles and contentFiles
var outlineFiles = resolveFiles({
      paths: outlinePaths,
      dir: testDir,
      namespace: '{outline,Outline}'
    }),
    contentFiles = resolveFiles({
      paths: contentPaths,
      dir: testDir,
      namespace: '{content,Content}'
    });

// If there are no outline files, notify the user and quit
if (outlineFiles.length === 0) {
  console.error('No doubleshot outline files could be found.');
  console.error('Please place them as `test/*outline.json`, `test/*outline.yaml`, or specify them via `--outline`.');
  console.log('');
  program.outputHelp();
  process.exit(1);
}

// Similarly notify for contentFiles
if (contentFiles.length === 0) {
  console.error('No doubleshot content files could be found.');
  console.error('Please place them as `test/*content.js` or specify them via `--content`.');
  console.log('');
  program.outputHelp();
  process.exit(1);
}

// Add in the outlineFiles and contentFiles
outlineFiles.forEach(doubleshot.addOutline, doubleshot);
contentFiles.forEach(doubleshot.addContent, doubleshot);

// If there was a `watch` request, watch
if (program.watch) {
  // Overload watch utility to pull in *any* of our extensions
  var filesExtRegexp = new RegExp('\\.(' + extensions.join('|') + ')$'),
      join = path.join,
      ignore = ['node_modules', '.git'],
      ignored = function (path) {
        return !~ignore.indexOf(path);
      },
      findFiles = function (dir, ret){
        ret = ret || [];

        fs.readdirSync(dir)
        .filter(ignored)
        .forEach(function(path){
          path = join(dir, path);
          if (fs.statSync(path).isDirectory()) {
            findFiles(path, ret);
          } else if (path.match(filesExtRegexp)) {
            ret.push(path);
          }
        });

        return ret;
      };
  Doubleshot.utils.files = findFiles;

  // Call watch function with our files
  var files = doubleshot.files;
  doubleshot._watch(files);
} else {
// Otherwise, run doubleshot
  doubleshot.run(function () {
    // DEV: On Windows machines, process.exit permaturely occurs before reporter is done. This is to delay that.
    setTimeout(function () {
      process.exit();
    }, 15);
  });
}